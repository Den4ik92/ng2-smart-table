import { Subject } from "rxjs";
import { Deferred, getDeepFromObject } from "./helpers";
import { DataSet } from "./data-set/data-set";
export class Grid {
    constructor(source, settings) {
        this.createFormShown = false;
        this.onSelectRowSource = new Subject();
        this.onDeselectRowSource = new Subject();
        this.setSettings(settings);
        this.setSource(source);
    }
    detach() {
        if (this.sourceOnChangedSubscription) {
            this.sourceOnChangedSubscription.unsubscribe();
        }
        if (this.sourceOnUpdatedSubscription) {
            this.sourceOnUpdatedSubscription.unsubscribe();
        }
    }
    showActionColumn(position) {
        return this.isCurrentActionsPosition(position) && this.isActionsVisible();
    }
    isCurrentActionsPosition(position) {
        return position == this.getSetting("actions.position");
    }
    isActionsVisible() {
        return (this.getSetting("actions.add", false) ||
            this.getSetting("actions.edit", false) ||
            this.getSetting("actions.delete", false) ||
            !!this.getSetting("actions.custom", [])?.length);
    }
    isMultiSelectVisible() {
        return this.getSetting("selectMode") === "multi";
    }
    getNewRow() {
        return this.dataSet.newRow;
    }
    setSettings(settings) {
        this.settings = settings;
        this.dataSet = new DataSet([], this.getSetting("columns"));
        if (this.source) {
            this.source.refresh();
        }
    }
    getDataSet() {
        return this.dataSet;
    }
    setSource(source) {
        this.source = this.prepareSource(source);
        this.detach();
        this.sourceOnChangedSubscription = this.source
            .onChanged()
            .subscribe((changes) => this.processDataChange(changes));
        this.sourceOnUpdatedSubscription = this.source
            .onUpdated()
            .subscribe((data) => {
            const changedRow = this.dataSet.findRowByData(data);
            if (changedRow) {
                changedRow.setData(data);
            }
        });
    }
    getSetting(name, defaultValue) {
        return getDeepFromObject(this.settings, name, defaultValue);
    }
    getColumns() {
        return this.dataSet.getColumns();
    }
    getRows() {
        return this.dataSet.getRows();
    }
    selectRow(row, state) {
        this.dataSet.selectRow(row, state);
    }
    multipleSelectRow(row) {
        this.dataSet.multipleSelectRow(row);
    }
    onSelectRow() {
        return this.onSelectRowSource.asObservable();
    }
    onDeselectRow() {
        return this.onDeselectRowSource.asObservable();
    }
    edit(row) {
        row.isInEditing = true;
    }
    create(row, confirmEmitter) {
        row.pending = true;
        const deferred = new Deferred();
        deferred.promise
            .then((newData) => {
            row.pending = false;
            newData = newData ? newData : row.getNewData();
            this.source.prepend(newData).then(() => {
                this.createFormShown = false;
                this.dataSet.createNewRow();
            });
        })
            .catch((err) => {
            row.pending = false;
        });
        if (this.getSetting("add.confirmCreate")) {
            confirmEmitter.emit({
                newData: row.getNewData(),
                source: this.source,
                confirm: deferred,
            });
        }
        else {
            deferred.resolve(false);
        }
    }
    save(row, confirmEmitter) {
        row.pending = true;
        const deferred = new Deferred();
        deferred.promise
            .then((newData) => {
            row.pending = false;
            newData = newData ? newData : row.getNewData();
            this.source.update(row.getData(), newData).then(() => {
                row.isInEditing = false;
            });
        })
            .catch((err) => {
            row.pending = false;
        });
        if (this.getSetting("edit.confirmSave")) {
            confirmEmitter.emit({
                data: row.getData(),
                newData: row.getNewData(),
                source: this.source,
                confirm: deferred,
            });
        }
        else {
            deferred.resolve(false);
        }
    }
    delete(row, confirmEmitter) {
        row.pending = true;
        const deferred = new Deferred();
        deferred.promise
            .then(() => {
            row.pending = false;
            this.source.remove(row.getData());
        })
            .catch((err) => {
            row.pending = false;
            // doing nothing
        });
        if (this.getSetting("delete.confirmDelete")) {
            confirmEmitter.emit({
                data: row.getData(),
                source: this.source,
                confirm: deferred,
            });
        }
        else {
            deferred.resolve(false);
        }
        if (row.isSelected) {
            this.dataSet.selectRow(row, false);
        }
    }
    processDataChange(changes) {
        if (this.shouldProcessChange(changes)) {
            if (changes["action"] === "load") {
                this.dataSet.deselectAll();
            }
            this.dataSet.setData(changes["elements"]);
        }
    }
    shouldProcessChange(changes) {
        if (["filter", "sort", "page", "remove", "refresh", "load", "paging"].indexOf(changes["action"]) !== -1) {
            return true;
        }
        else if (["prepend", "append"].indexOf(changes["action"]) !== -1 &&
            !this.getSetting("pager.display")) {
            return true;
        }
        return false;
    }
    prepareSource(source) {
        const initialSort = this.getInitialSort();
        if (initialSort) {
            source.setSort([initialSort], false);
        }
        if (this.getSetting("pager.display") === true) {
            source.setPaging(1, this.getSetting("pager.perPage"), false);
        }
        source.refresh();
        return source;
    }
    getInitialSort() {
        const defaultSortColumn = this.getColumns().find((column) => column.isSortable && column.defaultSortDirection);
        if (!defaultSortColumn) {
            return false;
        }
        return {
            field: defaultSortColumn.id,
            direction: defaultSortColumn.defaultSortDirection || "asc",
            compare: defaultSortColumn.getCompareFunction(),
        };
    }
    getSelectedRowsData() {
        return this.dataSet.getRows();
    }
    selectAllRows(status) {
        this.dataSet.setSelectAll(status);
    }
    getFirstRow() {
        return this.dataSet.getFirstRow();
    }
    getLastRow() {
        return this.dataSet.getLastRow();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nMi1zbWFydC10YWJsZS9zcmMvbGliL2xpYi9ncmlkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQWdCLE1BQU0sTUFBTSxDQUFDO0FBSTdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFHeEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBTzlDLE1BQU0sT0FBTyxJQUFJO0lBYWYsWUFBWSxNQUF1QixFQUFFLFFBQTRCO1FBWmpFLG9CQUFlLEdBQVksS0FBSyxDQUFDO1FBTWpDLHNCQUFpQixHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7UUFDdkMsd0JBQW1CLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztRQU12QyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVELE1BQU07UUFDSixJQUFJLElBQUksQ0FBQywyQkFBMkIsRUFBRSxDQUFDO1lBQ3JDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNqRCxDQUFDO1FBQ0QsSUFBSSxJQUFJLENBQUMsMkJBQTJCLEVBQUUsQ0FBQztZQUNyQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDakQsQ0FBQztJQUNILENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxRQUFnQjtRQUMvQixPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUM1RSxDQUFDO0lBRUQsd0JBQXdCLENBQUMsUUFBZ0I7UUFDdkMsT0FBTyxRQUFRLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxr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QUFJLENBQzlDLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLE1BQU0sQ0FBQyxvQkFBb0IsQ0FDckUsQ0FBQztRQUNGLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ3ZCLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztRQUNELE9BQU87WUFDTCxLQUFLLEVBQUUsaUJBQWlCLENBQUMsRUFBRTtZQUMzQixTQUFTLEVBQUUsaUJBQWlCLENBQUMsb0JBQW9CLElBQUksS0FBSztZQUMxRCxPQUFPLEVBQUUsaUJBQWlCLENBQUMsa0JBQWtCLEVBQUU7U0FDaEQsQ0FBQztJQUNKLENBQUM7SUFFRCxtQkFBbUI7UUFDakIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxhQUFhLENBQUMsTUFBZTtRQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNwQyxDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb2NhbERhdGFTb3VyY2UgfSBmcm9tIFwiLi9kYXRhLXNvdXJjZS9sb2NhbC9sb2NhbC5kYXRhLXNvdXJjZVwiO1xuaW1wb3J0IHsgU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcblxuaW1wb3J0IHsgRGVmZXJyZWQsIGdldERlZXBGcm9tT2JqZWN0IH0gZnJvbSBcIi4vaGVscGVyc1wiO1xuaW1wb3J0IHsgQ29sdW1uIH0gZnJvbSBcIi4vZGF0YS1zZXQvY29sdW1uXCI7XG5pbXBvcnQgeyBSb3cgfSBmcm9tIFwiLi9kYXRhLXNldC9yb3dcIjtcbmltcG9ydCB7IERhdGFTZXQgfSBmcm9tIFwiLi9kYXRhLXNldC9kYXRhLXNldFwiO1xuaW1wb3J0IHtcbiAgU21hcnRUYWJsZVNldHRpbmdzLFxuICBTbWFydFRhYmxlQ29sdW1uU2V0dGluZ3MsXG4gIFNtYXJ0VGFibGVTb3J0SXRlbSxcbn0gZnJvbSBcIi4vaW50ZXJmYWNlcy9zbWFydC10YWJsZS5tb2RlbHNcIjtcblxuZXhwb3J0IGNsYXNzIEdyaWQge1xuICBjcmVhdGVGb3JtU2hvd246IGJvb2xlYW4gPSBmYWxzZTtcblxuICBzb3VyY2UhOiBMb2NhbERhdGFTb3VyY2U7XG4gIHNldHRpbmdzITogU21hcnRUYWJsZVNldHRpbmdzO1xuICBkYXRhU2V0ITogRGF0YVNldDtcblxuICBvblNlbGVjdFJvd1NvdXJjZSA9IG5ldyBTdWJqZWN0PGFueT4oKTtcbiAgb25EZXNlbGVjdFJvd1NvdXJjZSA9IG5ldyBTdWJqZWN0PGFueT4oKTtcblxuICBwcml2YXRlIHNvdXJjZU9uQ2hhbmdlZFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uIHwgdW5kZWZpbmVkO1xuICBwcml2YXRlIHNvdXJjZU9uVXBkYXRlZFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogTG9jYWxEYXRhU291cmNlLCBzZXR0aW5nczogU21hcnRUYWJsZVNldHRpbmdzKSB7XG4gICAgdGhpcy5zZXRTZXR0aW5ncyhzZXR0aW5ncyk7XG4gICAgdGhpcy5zZXRTb3VyY2Uoc291cmNlKTtcbiAgfVxuXG4gIGRldGFjaCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zb3VyY2VPbkNoYW5nZWRTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuc291cmNlT25DaGFuZ2VkU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnNvdXJjZU9uVXBkYXRlZFN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zb3VyY2VPblVwZGF0ZWRTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBzaG93QWN0aW9uQ29sdW1uKHBvc2l0aW9uOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pc0N1cnJlbnRBY3Rpb25zUG9zaXRpb24ocG9zaXRpb24pICYmIHRoaXMuaXNBY3Rpb25zVmlzaWJsZSgpO1xuICB9XG5cbiAgaXNDdXJyZW50QWN0aW9uc1Bvc2l0aW9uKHBvc2l0aW9uOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcG9zaXRpb24gPT0gdGhpcy5nZXRTZXR0aW5nKFwiYWN0aW9ucy5wb3NpdGlvblwiKTtcbiAgfVxuXG4gIGlzQWN0aW9uc1Zpc2libGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuZ2V0U2V0dGluZzxib29sZWFuPihcImFjdGlvbnMuYWRkXCIsIGZhbHNlKSB8fFxuICAgICAgdGhpcy5nZXRTZXR0aW5nPGJvb2xlYW4+KFwiYWN0aW9ucy5lZGl0XCIsIGZhbHNlKSB8fFxuICAgICAgdGhpcy5nZXRTZXR0aW5nPGJvb2xlYW4+KFwiYWN0aW9ucy5kZWxldGVcIiwgZmFsc2UpIHx8XG4gICAgICAhIXRoaXMuZ2V0U2V0dGluZzxbXT4oXCJhY3Rpb25zLmN1c3RvbVwiLCBbXSk/Lmxlbmd0aFxuICAgICk7XG4gIH1cblxuICBpc011bHRpU2VsZWN0VmlzaWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTZXR0aW5nKFwic2VsZWN0TW9kZVwiKSA9PT0gXCJtdWx0aVwiO1xuICB9XG5cbiAgZ2V0TmV3Um93KCk6IFJvdyB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVNldC5uZXdSb3c7XG4gIH1cblxuICBzZXRTZXR0aW5ncyhzZXR0aW5nczogU21hcnRUYWJsZVNldHRpbmdzKSB7XG4gICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgIHRoaXMuZGF0YVNldCA9IG5ldyBEYXRhU2V0KFxuICAgICAgW10sXG4gICAgICB0aGlzLmdldFNldHRpbmc8U21hcnRUYWJsZUNvbHVtblNldHRpbmdzW10+KFwiY29sdW1uc1wiKVxuICAgICk7XG5cbiAgICBpZiAodGhpcy5zb3VyY2UpIHtcbiAgICAgIHRoaXMuc291cmNlLnJlZnJlc2goKTtcbiAgICB9XG4gIH1cblxuICBnZXREYXRhU2V0KCk6IERhdGFTZXQge1xuICAgIHJldHVybiB0aGlzLmRhdGFTZXQ7XG4gIH1cblxuICBzZXRTb3VyY2Uoc291cmNlOiBMb2NhbERhdGFTb3VyY2UpIHtcbiAgICB0aGlzLnNvdXJjZSA9IHRoaXMucHJlcGFyZVNvdXJjZShzb3VyY2UpO1xuICAgIHRoaXMuZGV0YWNoKCk7XG5cbiAgICB0aGlzLnNvdXJjZU9uQ2hhbmdlZFN1YnNjcmlwdGlvbiA9IHRoaXMuc291cmNlXG4gICAgICAub25DaGFuZ2VkKClcbiAgICAgIC5zdWJzY3JpYmUoKGNoYW5nZXM6IGFueSkgPT4gdGhpcy5wcm9jZXNzRGF0YUNoYW5nZShjaGFuZ2VzKSk7XG5cbiAgICB0aGlzLnNvdXJjZU9uVXBkYXRlZFN1YnNjcmlwdGlvbiA9IHRoaXMuc291cmNlXG4gICAgICAub25VcGRhdGVkKClcbiAgICAgIC5zdWJzY3JpYmUoKGRhdGE6IGFueSkgPT4ge1xuICAgICAgICBjb25zdCBjaGFuZ2VkUm93ID0gdGhpcy5kYXRhU2V0LmZpbmRSb3dCeURhdGEoZGF0YSk7XG4gICAgICAgIGlmIChjaGFuZ2VkUm93KSB7XG4gICAgICAgICAgY2hhbmdlZFJvdy5zZXREYXRhKGRhdGEpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIGdldFNldHRpbmc8VD4obmFtZTogc3RyaW5nLCBkZWZhdWx0VmFsdWU/OiBhbnkpOiBUIHtcbiAgICByZXR1cm4gZ2V0RGVlcEZyb21PYmplY3QodGhpcy5zZXR0aW5ncywgbmFtZSwgZGVmYXVsdFZhbHVlKTtcbiAgfVxuXG4gIGdldENvbHVtbnMoKTogQXJyYXk8Q29sdW1uPiB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVNldC5nZXRDb2x1bW5zKCk7XG4gIH1cblxuICBnZXRSb3dzKCk6IEFycmF5PFJvdz4ge1xuICAgIHJldHVybiB0aGlzLmRhdGFTZXQuZ2V0Um93cygpO1xuICB9XG5cbiAgc2VsZWN0Um93KHJvdzogUm93LCBzdGF0ZTogYm9vbGVhbikge1xuICAgIHRoaXMuZGF0YVNldC5zZWxlY3RSb3cocm93LCBzdGF0ZSk7XG4gIH1cblxuICBtdWx0aXBsZVNlbGVjdFJvdyhyb3c6IFJvdykge1xuICAgIHRoaXMuZGF0YVNldC5tdWx0aXBsZVNlbGVjdFJvdyhyb3cpO1xuICB9XG5cbiAgb25TZWxlY3RSb3coKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5vblNlbGVjdFJvd1NvdXJjZS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIG9uRGVzZWxlY3RSb3coKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5vbkRlc2VsZWN0Um93U291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgZWRpdChyb3c6IFJvdykge1xuICAgIHJvdy5pc0luRWRpdGluZyA9IHRydWU7XG4gIH1cblxuICBjcmVhdGUocm93OiBSb3csIGNvbmZpcm1FbWl0dGVyOiBFdmVudEVtaXR0ZXI8YW55Pikge1xuICAgIHJvdy5wZW5kaW5nID0gdHJ1ZTtcbiAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgIGRlZmVycmVkLnByb21pc2VcbiAgICAgIC50aGVuKChuZXdEYXRhKSA9PiB7XG4gICAgICAgIHJvdy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIG5ld0RhdGEgPSBuZXdEYXRhID8gbmV3RGF0YSA6IHJvdy5nZXROZXdEYXRhKCk7XG4gICAgICAgIHRoaXMuc291cmNlLnByZXBlbmQobmV3RGF0YSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5jcmVhdGVGb3JtU2hvd24gPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmRhdGFTZXQuY3JlYXRlTmV3Um93KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIHJvdy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICB9KTtcblxuICAgIGlmICh0aGlzLmdldFNldHRpbmcoXCJhZGQuY29uZmlybUNyZWF0ZVwiKSkge1xuICAgICAgY29uZmlybUVtaXR0ZXIuZW1pdCh7XG4gICAgICAgIG5ld0RhdGE6IHJvdy5nZXROZXdEYXRhKCksXG4gICAgICAgIHNvdXJjZTogdGhpcy5zb3VyY2UsXG4gICAgICAgIGNvbmZpcm06IGRlZmVycmVkLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIHNhdmUocm93OiBSb3csIGNvbmZpcm1FbWl0dGVyOiBFdmVudEVtaXR0ZXI8YW55Pikge1xuICAgIHJvdy5wZW5kaW5nID0gdHJ1ZTtcbiAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgIGRlZmVycmVkLnByb21pc2VcbiAgICAgIC50aGVuKChuZXdEYXRhKSA9PiB7XG4gICAgICAgIHJvdy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIG5ld0RhdGEgPSBuZXdEYXRhID8gbmV3RGF0YSA6IHJvdy5nZXROZXdEYXRhKCk7XG4gICAgICAgIHRoaXMuc291cmNlLnVwZGF0ZShyb3cuZ2V0RGF0YSgpLCBuZXdEYXRhKS50aGVuKCgpID0+IHtcbiAgICAgICAgICByb3cuaXNJbkVkaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgcm93LnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuZ2V0U2V0dGluZyhcImVkaXQuY29uZmlybVNhdmVcIikpIHtcbiAgICAgIGNvbmZpcm1FbWl0dGVyLmVtaXQoe1xuICAgICAgICBkYXRhOiByb3cuZ2V0RGF0YSgpLFxuICAgICAgICBuZXdEYXRhOiByb3cuZ2V0TmV3RGF0YSgpLFxuICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlLFxuICAgICAgICBjb25maXJtOiBkZWZlcnJlZCxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICBkZWxldGUocm93OiBSb3csIGNvbmZpcm1FbWl0dGVyOiBFdmVudEVtaXR0ZXI8YW55Pikge1xuICAgIHJvdy5wZW5kaW5nID0gdHJ1ZTtcbiAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xuICAgIGRlZmVycmVkLnByb21pc2VcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgcm93LnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zb3VyY2UucmVtb3ZlKHJvdy5nZXREYXRhKCkpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIHJvdy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIC8vIGRvaW5nIG5vdGhpbmdcbiAgICAgIH0pO1xuICAgIGlmICh0aGlzLmdldFNldHRpbmcoXCJkZWxldGUuY29uZmlybURlbGV0ZVwiKSkge1xuICAgICAgY29uZmlybUVtaXR0ZXIuZW1pdCh7XG4gICAgICAgIGRhdGE6IHJvdy5nZXREYXRhKCksXG4gICAgICAgIHNvdXJjZTogdGhpcy5zb3VyY2UsXG4gICAgICAgIGNvbmZpcm06IGRlZmVycmVkLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoZmFsc2UpO1xuICAgIH1cbiAgICBpZiAocm93LmlzU2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMuZGF0YVNldC5zZWxlY3RSb3cocm93LCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgcHJvY2Vzc0RhdGFDaGFuZ2UoY2hhbmdlczogYW55KSB7XG4gICAgaWYgKHRoaXMuc2hvdWxkUHJvY2Vzc0NoYW5nZShjaGFuZ2VzKSkge1xuICAgICAgaWYgKGNoYW5nZXNbXCJhY3Rpb25cIl0gPT09IFwibG9hZFwiKSB7XG4gICAgICAgIHRoaXMuZGF0YVNldC5kZXNlbGVjdEFsbCgpO1xuICAgICAgfVxuICAgICAgdGhpcy5kYXRhU2V0LnNldERhdGEoY2hhbmdlc1tcImVsZW1lbnRzXCJdKTtcbiAgICB9XG4gIH1cblxuICBzaG91bGRQcm9jZXNzQ2hhbmdlKGNoYW5nZXM6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmIChcbiAgICAgIFtcImZpbHRlclwiLCBcInNvcnRcIiwgXCJwYWdlXCIsIFwicmVtb3ZlXCIsIFwicmVmcmVzaFwiLCBcImxvYWRcIiwgXCJwYWdpbmdcIl0uaW5kZXhPZihcbiAgICAgICAgY2hhbmdlc1tcImFjdGlvblwiXVxuICAgICAgKSAhPT0gLTFcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBbXCJwcmVwZW5kXCIsIFwiYXBwZW5kXCJdLmluZGV4T2YoY2hhbmdlc1tcImFjdGlvblwiXSkgIT09IC0xICYmXG4gICAgICAhdGhpcy5nZXRTZXR0aW5nKFwicGFnZXIuZGlzcGxheVwiKVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByZXBhcmVTb3VyY2Uoc291cmNlOiBMb2NhbERhdGFTb3VyY2UpOiBMb2NhbERhdGFTb3VyY2Uge1xuICAgIGNvbnN0IGluaXRpYWxTb3J0OiBTbWFydFRhYmxlU29ydEl0ZW0gfCBmYWxzZSA9IHRoaXMuZ2V0SW5pdGlhbFNvcnQoKTtcbiAgICBpZiAoaW5pdGlhbFNvcnQpIHtcbiAgICAgIHNvdXJjZS5zZXRTb3J0KFtpbml0aWFsU29ydF0sIGZhbHNlKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZ2V0U2V0dGluZyhcInBhZ2VyLmRpc3BsYXlcIikgPT09IHRydWUpIHtcbiAgICAgIHNvdXJjZS5zZXRQYWdpbmcoMSwgdGhpcy5nZXRTZXR0aW5nKFwicGFnZXIucGVyUGFnZVwiKSwgZmFsc2UpO1xuICAgIH1cblxuICAgIHNvdXJjZS5yZWZyZXNoKCk7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIGdldEluaXRpYWxTb3J0KCk6IFNtYXJ0VGFibGVTb3J0SXRlbSB8IGZhbHNlIHtcbiAgICBjb25zdCBkZWZhdWx0U29ydENvbHVtbiA9IHRoaXMuZ2V0Q29sdW1ucygpLmZpbmQoXG4gICAgICAoY29sdW1uOiBDb2x1bW4pID0+IGNvbHVtbi5pc1NvcnRhYmxlICYmIGNvbHVtbi5kZWZhdWx0U29ydERpcmVjdGlvblxuICAgICk7XG4gICAgaWYgKCFkZWZhdWx0U29ydENvbHVtbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgZmllbGQ6IGRlZmF1bHRTb3J0Q29sdW1uLmlkLFxuICAgICAgZGlyZWN0aW9uOiBkZWZhdWx0U29ydENvbHVtbi5kZWZhdWx0U29ydERpcmVjdGlvbiB8fCBcImFzY1wiLFxuICAgICAgY29tcGFyZTogZGVmYXVsdFNvcnRDb2x1bW4uZ2V0Q29tcGFyZUZ1bmN0aW9uKCksXG4gICAgfTtcbiAgfVxuXG4gIGdldFNlbGVjdGVkUm93c0RhdGEoKTogQXJyYXk8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVNldC5nZXRSb3dzKCk7XG4gIH1cblxuICBzZWxlY3RBbGxSb3dzKHN0YXR1czogYm9vbGVhbikge1xuICAgIHRoaXMuZGF0YVNldC5zZXRTZWxlY3RBbGwoc3RhdHVzKTtcbiAgfVxuXG4gIGdldEZpcnN0Um93KCk6IFJvdyB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVNldC5nZXRGaXJzdFJvdygpO1xuICB9XG5cbiAgZ2V0TGFzdFJvdygpOiBSb3cge1xuICAgIHJldHVybiB0aGlzLmRhdGFTZXQuZ2V0TGFzdFJvdygpO1xuICB9XG59XG4iXX0=