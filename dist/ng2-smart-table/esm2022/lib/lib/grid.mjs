import { Subject } from "rxjs";
import { Deferred, getDeepFromObject } from "./helpers";
import { DataSet } from "./data-set/data-set";
export class Grid {
    constructor(source, settings) {
        this.createFormShown = false;
        this.onSelectRowSource = new Subject();
        this.onDeselectRowSource = new Subject();
        this.setSettings(settings);
        this.setSource(source);
    }
    detach() {
        if (this.sourceOnChangedSubscription) {
            this.sourceOnChangedSubscription.unsubscribe();
        }
        if (this.sourceOnUpdatedSubscription) {
            this.sourceOnUpdatedSubscription.unsubscribe();
        }
    }
    showActionColumn(position) {
        return this.isCurrentActionsPosition(position) && this.isActionsVisible();
    }
    isCurrentActionsPosition(position) {
        return position == this.getSetting("actions.position");
    }
    isActionsVisible() {
        return (this.getSetting("actions.add", false) ||
            this.getSetting("actions.edit", false) ||
            this.getSetting("actions.delete", false) ||
            !!this.getSetting("actions.custom", [])?.length);
    }
    isMultiSelectVisible() {
        return this.getSetting("selectMode") === "multi";
    }
    getNewRow() {
        return this.dataSet.newRow;
    }
    setSettings(settings) {
        this.settings = settings;
        this.dataSet = new DataSet([], this.getSetting("columns"));
        if (this.source) {
            this.source.refresh();
        }
    }
    getDataSet() {
        return this.dataSet;
    }
    setSource(source) {
        this.source = this.prepareSource(source);
        this.detach();
        this.sourceOnChangedSubscription = this.source
            .onChanged()
            .subscribe((changes) => this.processDataChange(changes));
        this.sourceOnUpdatedSubscription = this.source
            .onUpdated()
            .subscribe((data) => {
            const changedRow = this.dataSet.findRowByData(data);
            if (changedRow) {
                changedRow.setData(data);
            }
        });
    }
    getSetting(name, defaultValue) {
        return getDeepFromObject(this.settings, name, defaultValue);
    }
    getColumns() {
        return this.dataSet.getColumns();
    }
    getRows() {
        return this.dataSet.getRows();
    }
    selectRow(row, state) {
        this.dataSet.selectRow(row, state);
    }
    multipleSelectRow(row) {
        this.dataSet.multipleSelectRow(row);
    }
    onSelectRow() {
        return this.onSelectRowSource.asObservable();
    }
    onDeselectRow() {
        return this.onDeselectRowSource.asObservable();
    }
    edit(row) {
        row.isInEditing = true;
    }
    create(row, confirmEmitter) {
        row.pending = true;
        const deferred = new Deferred();
        deferred.promise
            .then((newData) => {
            row.pending = false;
            newData = newData ? newData : row.getNewData();
            this.source.prepend(newData).then(() => {
                this.createFormShown = false;
                this.dataSet.createNewRow();
            });
        })
            .catch((err) => {
            row.pending = false;
        });
        if (this.getSetting("add.confirmCreate")) {
            confirmEmitter.emit({
                newData: row.getNewData(),
                source: this.source,
                confirm: deferred,
            });
        }
        else {
            deferred.resolve(false);
        }
    }
    save(row, confirmEmitter) {
        row.pending = true;
        const deferred = new Deferred();
        deferred.promise
            .then((newData) => {
            row.pending = false;
            newData = newData ? newData : row.getNewData();
            this.source.update(row.getData(), newData).then(() => {
                row.isInEditing = false;
            });
        })
            .catch((err) => {
            row.pending = false;
        });
        if (this.getSetting("edit.confirmSave")) {
            confirmEmitter.emit({
                data: row.getData(),
                newData: row.getNewData(),
                source: this.source,
                confirm: deferred,
            });
        }
        else {
            deferred.resolve(false);
        }
    }
    delete(row, confirmEmitter) {
        row.pending = true;
        const deferred = new Deferred();
        deferred.promise
            .then(() => {
            row.pending = false;
            this.source.remove(row.getData());
        })
            .catch((err) => {
            row.pending = false;
            // doing nothing
        });
        if (this.getSetting("delete.confirmDelete")) {
            confirmEmitter.emit({
                data: row.getData(),
                source: this.source,
                confirm: deferred,
            });
        }
        else {
            deferred.resolve(false);
        }
        if (row.isSelected) {
            this.dataSet.selectRow(row, false);
        }
    }
    processDataChange(changes) {
        if (this.shouldProcessChange(changes)) {
            if (changes["action"] === "load") {
                this.dataSet.deselectAll();
            }
            this.dataSet.setData(changes["elements"]);
        }
    }
    shouldProcessChange(changes) {
        if (["filter", "sort", "page", "remove", "refresh", "load", "paging"].indexOf(changes["action"]) !== -1) {
            return true;
        }
        else if (["prepend", "append"].indexOf(changes["action"]) !== -1 &&
            !this.getSetting("pager.display")) {
            return true;
        }
        return false;
    }
    prepareSource(source) {
        const initialSort = this.getInitialSort();
        if (initialSort) {
            source.setSort([initialSort], false);
        }
        if (this.getSetting("pager.display") === true) {
            source.setPaging(1, this.getSetting("pager.perPage"), false);
        }
        source.refresh();
        return source;
    }
    getInitialSort() {
        const defaultSortColumn = this.getColumns().find((column) => column.isSortable && column.defaultSortDirection);
        if (!defaultSortColumn) {
            return false;
        }
        return {
            field: defaultSortColumn.id,
            direction: defaultSortColumn.defaultSortDirection || "asc",
            compare: defaultSortColumn.getCompareFunction(),
        };
    }
    getSelectedRowsData() {
        return this.dataSet.getRows();
    }
    selectAllRows(status) {
        this.dataSet.setSelectAll(status);
    }
    getFirstRow() {
        return this.dataSet.getFirstRow();
    }
    getLastRow() {
        return this.dataSet.getLastRow();
    }
}
//# sourceMappingURL=data:application/json;base64,