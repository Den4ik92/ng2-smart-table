import { Subject } from 'rxjs';
import { Observable } from 'rxjs';
import { SmartTableFilterConf, SmartTableOnChangedEvent, SmartTableOnChangedEventType, SmartTablePagingItem, SmartTableSortItem } from '../interfaces/smart-table.models';
export declare abstract class DataSource<T = any> {
    protected onChangedSource: Subject<SmartTableOnChangedEvent<any>>;
    protected onAddedSource: Subject<any>;
    protected onUpdatedSource: Subject<any>;
    protected onRemovedSource: Subject<any>;
    abstract getAll(): Promise<T[]>;
    abstract getElements(): Promise<T[]>;
    abstract getSort(): SmartTableSortItem[];
    abstract getFilter(): SmartTableFilterConf;
    abstract getPaging(): SmartTablePagingItem;
    abstract count(): number;
    refresh(): void;
    load<T>(data: Array<T>): Promise<true>;
    onChanged(): Observable<SmartTableOnChangedEvent>;
    onAdded(): Observable<any>;
    onUpdated(): Observable<any>;
    onRemoved(): Observable<any>;
    prepend(element: T): Promise<true>;
    append(element: T): Promise<true>;
    add(element: T): Promise<true>;
    remove(element: T): Promise<true>;
    update(element: T, values: any): Promise<true>;
    empty(): Promise<true>;
    setSort(conf: Array<any>, doEmit?: boolean): void;
    setFilter(conf: Array<any>, andOperator?: boolean, doEmit?: boolean): void;
    addFilter(fieldConf: {}, andOperator?: boolean, doEmit?: boolean): void;
    setPaging(page: number, perPage: number, doEmit?: boolean): void;
    setPage(page: number, doEmit?: boolean): void;
    protected emitOnRemoved(element: T): void;
    protected emitOnUpdated(element: T): void;
    protected emitOnAdded(element: T): void;
    protected emitOnChanged(action: SmartTableOnChangedEventType): void;
}
