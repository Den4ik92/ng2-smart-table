import { Subject } from 'rxjs';
import { SmartTableOnChangedEventName } from '../interfaces/smart-table.models';
export class DataSource {
    constructor() {
        this.onChangedSource = new Subject();
        this.onAddedSource = new Subject();
        this.onUpdatedSource = new Subject();
        this.onRemovedSource = new Subject();
    }
    refresh() {
        this.emitOnChanged(SmartTableOnChangedEventName.refresh);
    }
    loadEmit() {
        this.emitOnChanged(SmartTableOnChangedEventName.load);
        return Promise.resolve(true);
    }
    onChanged() {
        return this.onChangedSource.asObservable();
    }
    onAdded() {
        return this.onAddedSource.asObservable();
    }
    onUpdated() {
        return this.onUpdatedSource.asObservable();
    }
    onRemoved() {
        return this.onRemovedSource.asObservable();
    }
    prependEmit(element) {
        this.emitOnAdded(element);
        this.emitOnChanged(SmartTableOnChangedEventName.prepend);
        return Promise.resolve(true);
    }
    appendEmit(element) {
        this.emitOnAdded(element);
        this.emitOnChanged(SmartTableOnChangedEventName.append);
        return Promise.resolve(true);
    }
    addEmit(element) {
        this.emitOnAdded(element);
        this.emitOnChanged(SmartTableOnChangedEventName.add);
        return Promise.resolve(true);
    }
    removeEmit(element) {
        this.emitOnRemoved(element);
        this.emitOnChanged(SmartTableOnChangedEventName.remove);
        return Promise.resolve(true);
    }
    updateEmit(element) {
        this.emitOnUpdated(element);
        this.emitOnChanged(SmartTableOnChangedEventName.update);
        return Promise.resolve(true);
    }
    emptyEmit() {
        this.emitOnChanged(SmartTableOnChangedEventName.empty);
        return Promise.resolve(true);
    }
    setSortEmit() {
        this.emitOnChanged(SmartTableOnChangedEventName.sort);
    }
    setFilterEmit() {
        this.emitOnChanged(SmartTableOnChangedEventName.filter);
    }
    addFilterEmit() {
        this.emitOnChanged(SmartTableOnChangedEventName.filter);
    }
    setPagingEmit() {
        this.emitOnChanged(SmartTableOnChangedEventName.paging);
    }
    setPageEmit() {
        this.emitOnChanged(SmartTableOnChangedEventName.page);
    }
    emitOnRemoved(element) {
        this.onRemovedSource.next(element);
    }
    emitOnUpdated(element) {
        this.onUpdatedSource.next(element);
    }
    emitOnAdded(element) {
        this.onAddedSource.next(element);
    }
    emitOnChanged(action) {
        this.getElements().then((elements) => this.onChangedSource.next({
            action: action,
            elements: elements,
            paging: this.getPaging(),
            filter: this.getFilter(),
            sort: this.getSort(),
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,