import { Subject } from 'rxjs';
import { SmartTableOnChangedEventName } from '../interfaces/smart-table.models';
export class DataSource {
    constructor() {
        this.onChangedSource = new Subject();
        this.onAddedSource = new Subject();
        this.onUpdatedSource = new Subject();
        this.onRemovedSource = new Subject();
    }
    refresh() {
        this.emitOnChanged(SmartTableOnChangedEventName.refresh);
    }
    load(data) {
        this.emitOnChanged(SmartTableOnChangedEventName.load);
        return Promise.resolve(true);
    }
    onChanged() {
        return this.onChangedSource.asObservable();
    }
    onAdded() {
        return this.onAddedSource.asObservable();
    }
    onUpdated() {
        return this.onUpdatedSource.asObservable();
    }
    onRemoved() {
        return this.onRemovedSource.asObservable();
    }
    prepend(element) {
        this.emitOnAdded(element);
        this.emitOnChanged(SmartTableOnChangedEventName.prepend);
        return Promise.resolve(true);
    }
    append(element) {
        this.emitOnAdded(element);
        this.emitOnChanged(SmartTableOnChangedEventName.append);
        return Promise.resolve(true);
    }
    add(element) {
        this.emitOnAdded(element);
        this.emitOnChanged(SmartTableOnChangedEventName.add);
        return Promise.resolve(true);
    }
    remove(element) {
        this.emitOnRemoved(element);
        this.emitOnChanged(SmartTableOnChangedEventName.remove);
        return Promise.resolve(true);
    }
    update(element, values) {
        this.emitOnUpdated(element);
        this.emitOnChanged(SmartTableOnChangedEventName.update);
        return Promise.resolve(true);
    }
    empty() {
        this.emitOnChanged(SmartTableOnChangedEventName.empty);
        return Promise.resolve(true);
    }
    setSort(conf, doEmit) {
        if (doEmit) {
            this.emitOnChanged(SmartTableOnChangedEventName.sort);
        }
    }
    setFilter(conf, andOperator, doEmit) {
        if (doEmit) {
            this.emitOnChanged(SmartTableOnChangedEventName.filter);
        }
    }
    addFilter(fieldConf, andOperator, doEmit) {
        if (doEmit) {
            this.emitOnChanged(SmartTableOnChangedEventName.filter);
        }
    }
    setPaging(page, perPage, doEmit) {
        if (doEmit) {
            this.emitOnChanged(SmartTableOnChangedEventName.paging);
        }
    }
    setPage(page, doEmit) {
        if (doEmit) {
            this.emitOnChanged(SmartTableOnChangedEventName.page);
        }
    }
    emitOnRemoved(element) {
        this.onRemovedSource.next(element);
    }
    emitOnUpdated(element) {
        this.onUpdatedSource.next(element);
    }
    emitOnAdded(element) {
        this.onAddedSource.next(element);
    }
    emitOnChanged(action) {
        this.getElements().then((elements) => this.onChangedSource.next({
            action: action,
            elements: elements,
            paging: this.getPaging(),
            filter: this.getFilter(),
            sort: this.getSort(),
        }));
    }
}
//# sourceMappingURL=data:application/json;base64,