import { Row } from './row';
import { Column } from './column';
export class DataSet {
    constructor(data = [], columnSettings) {
        this.columnSettings = columnSettings;
        this.data = [];
        this.columns = [];
        this.rows = [];
        this.selectedRows = new Set();
        this.createColumns(columnSettings);
        this.setData(data);
        this.createNewRow();
    }
    setData(data) {
        this.data = data;
        this.createRows();
    }
    getColumns() {
        return this.columns;
    }
    getRows() {
        return this.rows;
    }
    getFirstRow() {
        return this.rows[0];
    }
    getLastRow() {
        return this.rows[this.rows.length - 1];
    }
    findRowByData(data) {
        return this.rows.find((row) => row.getData() === data);
    }
    setSelectAll(state) {
        this.rows.forEach((row) => {
            row.isSelected = state;
            this.storeSelectedRow(row);
        });
    }
    deselectAll() {
        this.rows.forEach((row) => {
            row.isSelected = false;
        });
        // we need to clear selectedRow field because no one row selected
        this.selectedRows.clear();
    }
    selectRow(row, state) {
        row.isSelected = state;
        this.storeSelectedRow(row);
    }
    multipleSelectRow(row) {
        row.isSelected = !row.isSelected;
        this.storeSelectedRow(row);
        return row;
    }
    getSelectedRowsData() {
        return [...this.selectedRows];
    }
    createNewRow() {
        this.newRow = new Row(-1, {}, this);
        this.newRow.isInEditing = true;
    }
    /**
     * Create columns by mapping from the settings
     * @param settings
     * @private
     */
    createColumns(settings) {
        for (const id in settings) {
            if (settings.hasOwnProperty(id)) {
                this.columns.push(new Column(id, settings[id], this));
            }
        }
    }
    /**
     * Create rows based on current data prepared in data source
     * @private
     */
    createRows() {
        this.rows = [];
        this.data.forEach((el, index) => {
            const row = new Row(index, el, this);
            row.isSelected = this.selectedRows.has(row.getData());
            this.rows.push(row);
        });
    }
    get isAllSelected() {
        return this.rows.every((row) => row.isSelected);
    }
    storeSelectedRow(row) {
        if (row.isSelected) {
            this.selectedRows.add(row.getData());
        }
        else {
            this.selectedRows.delete(row.getData());
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1zZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZzItc21hcnQtdGFibGUvc3JjL2xpYi9saWIvZGF0YS1zZXQvZGF0YS1zZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUM1QixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWxDLE1BQU0sT0FBTyxPQUFPO0lBU2xCLFlBQVksT0FBbUIsRUFBRSxFQUFZLGNBQXNCO1FBQXRCLG1CQUFjLEdBQWQsY0FBYyxDQUFRO1FBTnpELFNBQUksR0FBZSxFQUFFLENBQUM7UUFDdEIsWUFBTyxHQUFrQixFQUFFLENBQUM7UUFDNUIsU0FBSSxHQUFlLEVBQUUsQ0FBQztRQUN0QixpQkFBWSxHQUFHLElBQUksR0FBRyxFQUFPLENBQUM7UUFJdEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRW5CLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsT0FBTyxDQUFDLElBQWdCO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FB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SUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDdEM7YUFBTTtZQUNMLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQ3pDO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUm93IH0gZnJvbSAnLi9yb3cnO1xuaW1wb3J0IHsgQ29sdW1uIH0gZnJvbSAnLi9jb2x1bW4nO1xuXG5leHBvcnQgY2xhc3MgRGF0YVNldCB7XG4gIG5ld1JvdzogUm93O1xuXG4gIHByb3RlY3RlZCBkYXRhOiBBcnJheTxhbnk+ID0gW107XG4gIHByb3RlY3RlZCBjb2x1bW5zOiBBcnJheTxDb2x1bW4+ID0gW107XG4gIHByb3RlY3RlZCByb3dzOiBBcnJheTxSb3c+ID0gW107XG4gIHByb3RlY3RlZCBzZWxlY3RlZFJvd3MgPSBuZXcgU2V0PFJvdz4oKTtcbiAgcHJvdGVjdGVkIHdpbGxTZWxlY3Q6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihkYXRhOiBBcnJheTxhbnk+ID0gW10sIHByb3RlY3RlZCBjb2x1bW5TZXR0aW5nczogT2JqZWN0KSB7XG4gICAgdGhpcy5jcmVhdGVDb2x1bW5zKGNvbHVtblNldHRpbmdzKTtcbiAgICB0aGlzLnNldERhdGEoZGF0YSk7XG5cbiAgICB0aGlzLmNyZWF0ZU5ld1JvdygpO1xuICB9XG5cbiAgc2V0RGF0YShkYXRhOiBBcnJheTxhbnk+KSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmNyZWF0ZVJvd3MoKTtcbiAgfVxuXG4gIGdldENvbHVtbnMoKTogQXJyYXk8Q29sdW1uPiB7XG4gICAgcmV0dXJuIHRoaXMuY29sdW1ucztcbiAgfVxuXG4gIGdldFJvd3MoKTogQXJyYXk8Um93PiB7XG4gICAgcmV0dXJuIHRoaXMucm93cztcbiAgfVxuXG4gIGdldEZpcnN0Um93KCk6IFJvdyB7XG4gICAgcmV0dXJuIHRoaXMucm93c1swXTtcbiAgfVxuXG4gIGdldExhc3RSb3coKTogUm93IHtcbiAgICByZXR1cm4gdGhpcy5yb3dzW3RoaXMucm93cy5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIGZpbmRSb3dCeURhdGEoZGF0YTogYW55KTogUm93IHtcbiAgICByZXR1cm4gdGhpcy5yb3dzLmZpbmQoKHJvdzogUm93KSA9PiByb3cuZ2V0RGF0YSgpID09PSBkYXRhKTtcbiAgfVxuXG4gIHNldFNlbGVjdEFsbChzdGF0ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMucm93cy5mb3JFYWNoKChyb3cpID0+IHtcbiAgICAgIHJvdy5pc1NlbGVjdGVkID0gc3RhdGU7XG4gICAgICB0aGlzLnN0b3JlU2VsZWN0ZWRSb3cocm93KTtcbiAgICB9KTtcbiAgfVxuXG4gIGRlc2VsZWN0QWxsKCkge1xuICAgIHRoaXMucm93cy5mb3JFYWNoKChyb3cpID0+IHtcbiAgICAgIHJvdy5pc1NlbGVjdGVkID0gZmFsc2U7XG4gICAgfSk7XG4gICAgLy8gd2UgbmVlZCB0byBjbGVhciBzZWxlY3RlZFJvdyBmaWVsZCBiZWNhdXNlIG5vIG9uZSByb3cgc2VsZWN0ZWRcbiAgICB0aGlzLnNlbGVjdGVkUm93cy5jbGVhcigpO1xuICB9XG5cbiAgc2VsZWN0Um93KHJvdzogUm93LCBzdGF0ZTogYm9vbGVhbik6IHZvaWQge1xuICAgIHJvdy5pc1NlbGVjdGVkID0gc3RhdGU7XG4gICAgdGhpcy5zdG9yZVNlbGVjdGVkUm93KHJvdyk7XG4gIH1cblxuICBtdWx0aXBsZVNlbGVjdFJvdyhyb3c6IFJvdyk6IFJvdyB7XG4gICAgcm93LmlzU2VsZWN0ZWQgPSAhcm93LmlzU2VsZWN0ZWQ7XG4gICAgdGhpcy5zdG9yZVNlbGVjdGVkUm93KHJvdyk7XG5cbiAgICByZXR1cm4gcm93O1xuICB9XG5cbiAgZ2V0U2VsZWN0ZWRSb3dzRGF0YSgpOiBBcnJheTxhbnk+IHtcbiAgICByZXR1cm4gWy4uLnRoaXMuc2VsZWN0ZWRSb3dzXVxuICB9XG5cbiAgY3JlYXRlTmV3Um93KCkge1xuICAgIHRoaXMubmV3Um93ID0gbmV3IFJvdygtMSwge30sIHRoaXMpO1xuICAgIHRoaXMubmV3Um93LmlzSW5FZGl0aW5nID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgY29sdW1ucyBieSBtYXBwaW5nIGZyb20gdGhlIHNldHRpbmdzXG4gICAqIEBwYXJhbSBzZXR0aW5nc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgY3JlYXRlQ29sdW1ucyhzZXR0aW5nczogYW55KSB7XG4gICAgZm9yIChjb25zdCBpZCBpbiBzZXR0aW5ncykge1xuICAgICAgaWYgKHNldHRpbmdzLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgICB0aGlzLmNvbHVtbnMucHVzaChuZXcgQ29sdW1uKGlkLCBzZXR0aW5nc1tpZF0sIHRoaXMpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHJvd3MgYmFzZWQgb24gY3VycmVudCBkYXRhIHByZXBhcmVkIGluIGRhdGEgc291cmNlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjcmVhdGVSb3dzKCkge1xuICAgIHRoaXMucm93cyA9IFtdO1xuICAgIHRoaXMuZGF0YS5mb3JFYWNoKChlbCwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHJvdyA9IG5ldyBSb3coaW5kZXgsIGVsLCB0aGlzKTtcbiAgICAgIHJvdy5pc1NlbGVjdGVkID0gdGhpcy5zZWxlY3RlZFJvd3MuaGFzKHJvdy5nZXREYXRhKCkpO1xuICAgICAgdGhpcy5yb3dzLnB1c2gocm93KTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgaXNBbGxTZWxlY3RlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5yb3dzLmV2ZXJ5KChyb3cpID0+IHJvdy5pc1NlbGVjdGVkKVxuICB9XG5cbiAgcHJpdmF0ZSBzdG9yZVNlbGVjdGVkUm93KHJvdzogUm93KTogdm9pZCB7XG4gICAgaWYocm93LmlzU2VsZWN0ZWQpIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRSb3dzLmFkZChyb3cuZ2V0RGF0YSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3RlZFJvd3MuZGVsZXRlKHJvdy5nZXREYXRhKCkpO1xuICAgIH1cbiAgfVxufVxuIl19